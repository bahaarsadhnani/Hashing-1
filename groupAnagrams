class Solution {
  //  49. Group Anagrams
    
    //Time Complexity is O(nk)
   // n is length of the string and k is the length of each character
    public List<List<String>> groupAnagrams(String[] strs) {
        if(strs.length==0 || strs ==null)
            return new ArrayList<>();
        HashMap<Long,List<String>> map = new  HashMap<>();
        
        for(String s: strs)         //n
        {
          long primeProduct =  calculatePrimeValueOfWord(s); //k
            if(!map.containsKey(primeProduct))
            {
                 map.put(primeProduct,new ArrayList<>());
                 
            }
               
       map.get(primeProduct).add(s);
           
            
        }
        return new ArrayList<>(map.values());
    }
    
    public long calculatePrimeValueOfWord(String s)
    {
        int[] primes ={2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101,103};
        long result=1;
        for(int i =0;i<s.length();i++)
        {
            char ch =s.charAt(i);
           int primeNo= primes[ch - 'a'];
            result *= primeNo;
        }
        return result;
    }
}